import streamlit as st
from openai import OpenAI
from PIL import Image
import requests
from io import BytesIO
import datetime
import base64
from typing import Dict, List, Tuple
import time
import random
import json
import uuid
import os
import re
from urllib.parse import urlencode, quote
import gc

# ÁÇ∫ÂÖçË≤ªÊñπÊ°àË®≠ÂÆöÈôêÂà∂
MAX_HISTORY_ITEMS = 15
MAX_FAVORITE_ITEMS = 30
MAX_BATCH_SIZE = 4

# È¢®Ê†ºÈ†êË®≠
STYLE_PRESETS = {
    "ÁÑ°": "", "ÈõªÂΩ±ÊÑü": "cinematic, dramatic lighting, high detail, sharp focus",
    "ÂãïÊº´È¢®": "anime style, vibrant colors, clean line art", "Ë≥ΩÂçöÈæêÂÖã": "cyberpunk, neon lights, futuristic city, high-tech",
    "Ê∞¥ÂΩ©Áï´": "watercolor painting, soft wash, blended colors", "Â•áÂπªËóùË°ì": "fantasy art, epic, detailed, magical",
}

# Êì¥Â±ïÁöÑÂúñÂÉèÂ∞∫ÂØ∏ÈÅ∏È†Ö
IMAGE_SIZES = {
    "Ëá™ÂÆöÁæ©...": "Custom", "1024x1024": "Ê≠£ÊñπÂΩ¢ (1:1)", "1080x1080": "IG Ë≤ºÊñá (1:1)",
    "1080x1350": "IG Á∏±Âêë (4:5)", "1080x1920": "IG Story (9:16)", "1200x630": "FB Ê©´Âêë (1.91:1)",
}

def rerun_app():
    if hasattr(st, 'rerun'): st.rerun()
    elif hasattr(st, 'experimental_rerun'): st.experimental_rerun()
    else: st.stop()

st.set_page_config(page_title="FLUX AI (ÊúÄÁµÇÂÆåÊï¥Áâà)", page_icon="üöÄ", layout="wide")

# API Êèê‰æõÂïÜ
API_PROVIDERS = {
    "Pollinations.ai": {"name": "Pollinations.ai Studio", "base_url_default": "https://image.pollinations.ai", "icon": "üå∏"},
    "NavyAI": {"name": "NavyAI", "base_url_default": "https://api.navy/v1", "icon": "‚öì"},
    "OpenAI Compatible": {"name": "OpenAI ÂÖºÂÆπ API", "base_url_default": "https://api.openai.com/v1", "icon": "ü§ñ"},
}

BASE_FLUX_MODELS = {"flux.1-schnell": {"name": "FLUX.1 Schnell", "icon": "‚ö°", "priority": 1}}

# --- Ê†∏ÂøÉÂáΩÊï∏ ---
def init_session_state():
    if 'api_profiles' not in st.session_state:
        st.session_state.api_profiles = {"È†êË®≠ Pollinations": {'provider': 'Pollinations.ai', 'api_key': '', 'base_url': 'https://image.pollinations.ai', 'validated': True, 'pollinations_auth_mode': 'ÂÖçË≤ª', 'pollinations_token': '', 'pollinations_referrer': ''}}
    if 'active_profile_name' not in st.session_state or st.session_state.active_profile_name not in st.session_state.api_profiles:
        st.session_state.active_profile_name = list(st.session_state.api_profiles.keys())[0]
    defaults = {'generation_history': [], 'favorite_images': [], 'discovered_models': {}}
    for key, value in defaults.items():
        if key not in st.session_state: st.session_state[key] = value

def get_active_config(): return st.session_state.api_profiles.get(st.session_state.active_profile_name, {})

def auto_discover_models(client, provider, base_url) -> Dict[str, Dict]:
    discovered = {}
    try:
        if provider == "Pollinations.ai":
            response = requests.get(f"{base_url}/models", timeout=10)
            if response.ok:
                models = response.json()
                for model_name in models:
                    discovered[model_name] = {"name": model_name.replace('-', ' ').title(), "icon": "üå∏"}
            else: st.warning(f"ÁÑ°Ê≥ïÂæû Pollinations Áç≤ÂèñÊ®°ÂûãÂàóË°®: HTTP {response.status_code}")
        elif client:
            models = client.models.list().data
            for model in models:
                if 'flux' in model.id.lower():
                    discovered[model.id] = {"name": model.id.replace('-', ' ').replace('_', ' ').title(), "icon": "‚ö°"}
    except Exception as e:
        st.error(f"ÁôºÁèæÊ®°ÂûãÂ§±Êïó: {e}")
    return discovered

def merge_models() -> Dict[str, Dict]:
    provider = get_active_config().get('provider')
    if provider == 'Pollinations.ai':
        # Â∞çÊñº PollinationsÔºåÂ¶ÇÊûúÊ≤íÊúâÁôºÁèæÊ®°ÂûãÔºåÂâá‰ΩøÁî®È†êË®≠
        return st.session_state.get('discovered_models') or {"flux": {"name": "Flux (È†êË®≠)", "icon": "üå∏"}}
    else:
        # Â∞çÊñºÂÖ∂‰ªñ providerÔºåÂêà‰ΩµÂü∫Á§éÊ®°ÂûãÂíåÁôºÁèæÁöÑÊ®°Âûã
        return {**BASE_FLUX_MODELS, **st.session_state.get('discovered_models', {})}

def validate_api_key(api_key: str, base_url: str, provider: str) -> Tuple[bool, str]:
    if provider == "Pollinations.ai": return True, "Pollinations.ai ÁÑ°ÈúÄÈ©óË≠â"
    try: OpenAI(api_key=api_key, base_url=base_url).models.list(); return True, "API ÂØÜÈë∞È©óË≠âÊàêÂäü"
    except Exception as e: return False, f"API È©óË≠âÂ§±Êïó: {e}"

def generate_images_with_retry(client, **params) -> Tuple[bool, any]:
    prompt = params.pop("prompt", "")
    if (neg_prompt := params.pop("negative_prompt", None)): prompt += f" --no {neg_prompt}"
    provider = get_active_config().get('provider')
    for attempt in range(3):
        try:
            if provider == "Pollinations.ai":
                width, height = params.get("size", "1024x1024").split('x')
                api_params = {k: v for k, v in {"model": params.get("model"), "width": width, "height": height, "seed": random.randint(0, 1000000), "nologo": params.get("nologo"), "private": params.get("private"), "enhance": params.get("enhance"), "safe": params.get("safe")}.items() if v}
                cfg = get_active_config()
                headers = {}
                auth_mode = cfg.get('pollinations_auth_mode', 'ÂÖçË≤ª')
                if auth_mode == '‰ª§Áâå' and cfg.get('pollinations_token'): headers['Authorization'] = f"Bearer {cfg['pollinations_token']}"
                elif auth_mode == 'ÂüüÂêç' and cfg.get('pollinations_referrer'): headers['Referer'] = cfg['pollinations_referrer']
                response = requests.get(f"{cfg['base_url']}/prompt/{quote(prompt)}?{urlencode(api_params)}", headers=headers, timeout=120)
                if response.ok: return True, type('MockResponse', (object,), {'data': [type('obj', (object,), {'b64_json': base64.b64encode(response.content).decode()})()]})()
                raise Exception(f"HTTP {response.status_code}: {response.text}")
            else:
                sdk_params = params.copy()
                sdk_params.pop("negative_prompt", None); sdk_params.pop("enhance", None); sdk_params.pop("private", None); sdk_params.pop("nologo", None); sdk_params.pop("safe", None)
                sdk_params["prompt"] = prompt
                sdk_params["response_format"] = "b64_json"
                return True, client.images.generate(**sdk_params)
        except Exception as e:
            if attempt < 2 and ("500" in str(e) or "timeout" in str(e).lower()): time.sleep((attempt + 1) * 2); continue
            return False, str(e)
    return False, "ÊâÄÊúâÈáçË©¶ÂùáÂ§±Êïó"

def add_to_history(prompt: str, negative_prompt: str, model: str, images: List[str], metadata: Dict):
    history = st.session_state.generation_history
    history.insert(0, {"id": str(uuid.uuid4()), "timestamp": datetime.datetime.now(), "prompt": prompt, "negative_prompt": negative_prompt, "model": model, "images": images, "metadata": metadata})
    st.session_state.generation_history = history[:MAX_HISTORY_ITEMS]

def display_image_with_actions(b64_json: str, image_id: str, history_item: Dict):
    try:
        img_data = base64.b64decode(b64_json)
        st.image(Image.open(BytesIO(img_data)), use_column_width=True)
        col1, col2, col3 = st.columns(3)
        with col1: st.download_button("üì• ‰∏ãËºâ", img_data, f"flux_{image_id}.png", "image/png", key=f"dl_{image_id}", use_container_width=True)
        with col2:
            is_fav = any(fav['id'] == image_id for fav in st.session_state.favorite_images)
            if st.button("‚≠ê" if is_fav else "‚òÜ", key=f"fav_{image_id}", use_container_width=True, help="Êî∂Ëóè/ÂèñÊ∂àÊî∂Ëóè"):
                if is_fav: st.session_state.favorite_images = [f for f in st.session_state.favorite_images if f['id'] != image_id]
                else: st.session_state.favorite_images.append({"id": image_id, "image_b64": b64_json, "timestamp": datetime.datetime.now(), "history_item": history_item})
                rerun_app()
        with col3:
            if st.button("üé® ËÆäÈ´î", key=f"vary_{image_id}", use_container_width=True, help="‰ΩøÁî®Ê≠§ÊèêÁ§∫ÁîüÊàêËÆäÈ´î"):
                st.session_state.update({'vary_prompt': history_item['prompt'], 'vary_negative_prompt': history_item.get('negative_prompt', ''), 'vary_model': history_item['model']})
                rerun_app()
    except Exception as e: st.error(f"ÂúñÂÉèÈ°ØÁ§∫ÈåØË™§: {e}")

def init_api_client():
    cfg = get_active_config()
    if cfg.get('api_key') and cfg.get('provider') != "Pollinations.ai":
        try: return OpenAI(api_key=cfg['api_key'], base_url=cfg['base_url'])
        except Exception: return None
    return None

def show_api_settings():
    st.subheader("‚öôÔ∏è API Â≠òÊ™îÁÆ°ÁêÜ")
    profile_names = list(st.session_state.api_profiles.keys())
    active_profile_name = st.selectbox("Ê¥ªÂãïÂ≠òÊ™î", profile_names, index=profile_names.index(st.session_state.active_profile_name) if st.session_state.active_profile_name in profile_names else 0)
    
    if active_profile_name != st.session_state.active_profile_name:
        st.session_state.active_profile_name = active_profile_name
        st.session_state.discovered_models = {} # ÂàáÊèõÂ≠òÊ™îÊôÇÊ∏ÖÁ©∫Â∑≤ÁôºÁèæÊ®°Âûã
        rerun_app()

    active_config = get_active_config().copy()
    with st.expander("üìù Á∑®ËºØÂ≠òÊ™îÂÖßÂÆπ", expanded=True):
        provs = list(API_PROVIDERS.keys())
        sel_prov_name = st.selectbox("API Êèê‰æõÂïÜ", provs, index=provs.index(active_config.get('provider', 'Pollinations.ai')), format_func=lambda x: f"{API_PROVIDERS[x]['icon']} {API_PROVIDERS[x]['name']}")
        
        api_key_input, auth_mode, referrer, token = active_config.get('api_key', ''), 'ÂÖçË≤ª', '', ''
        
        if sel_prov_name == "Pollinations.ai":
            auth_mode = st.radio("Ë™çË≠âÊ®°Âºè", ["ÂÖçË≤ª", "ÂüüÂêç", "‰ª§Áâå"], horizontal=True, index=["ÂÖçË≤ª", "ÂüüÂêç", "‰ª§Áâå"].index(active_config.get('pollinations_auth_mode', 'ÂÖçË≤ª')))
            referrer = st.text_input("ÊáâÁî®ÂüüÂêç (Referrer)", value=active_config.get('pollinations_referrer', ''), placeholder="‰æãÂ¶Ç: my-app.koyeb.app", disabled=(auth_mode != 'ÂüüÂêç'))
            token = st.text_input("API ‰ª§Áâå (Token)", value=active_config.get('pollinations_token', ''), type="password", disabled=(auth_mode != '‰ª§Áâå'))
        else:
            api_key_input = st.text_input("API ÂØÜÈë∞", value=api_key_input, type="password")
        
        base_url_input = st.text_input("API Á´ØÈªû URL", value=active_config.get('base_url', API_PROVIDERS[sel_prov_name]['base_url_default']))

    profile_name_input = st.text_input("Â≠òÊ™îÂêçÁ®±", value=active_profile_name)
    if st.button("üíæ ‰øùÂ≠ò/Êõ¥Êñ∞Â≠òÊ™î", type="primary"):
        new_config = {'provider': sel_prov_name, 'api_key': api_key_input, 'base_url': base_url_input, 'pollinations_auth_mode': auth_mode, 'pollinations_referrer': referrer, 'pollinations_token': token}
        is_valid, msg = validate_api_key(new_config['api_key'], new_config['base_url'], new_config['provider'])
        new_config['validated'] = is_valid
        
        if profile_name_input != active_profile_name and active_profile_name in st.session_state.api_profiles:
            del st.session_state.api_profiles[active_profile_name]

        st.session_state.api_profiles[profile_name_input] = new_config
        st.session_state.active_profile_name = profile_name_input
        st.session_state.discovered_models = {} # ‰øùÂ≠òÂæåÊ∏ÖÁ©∫
        st.success(f"Â≠òÊ™î '{profile_name_input}' Â∑≤‰øùÂ≠ò„ÄÇÈ©óË≠â: {'ÊàêÂäü' if is_valid else 'Â§±Êïó'}")
        time.sleep(1); rerun_app()

init_session_state()
client = init_api_client()
cfg = get_active_config()
api_configured = cfg.get('validated', False)

# --- ÂÅ¥ÈÇäÊ¨Ñ ---
with st.sidebar:
    show_api_settings()
    st.markdown("---")
    if api_configured:
        st.success(f"üü¢ Ê¥ªÂãïÂ≠òÊ™î: '{st.session_state.active_profile_name}'")
        # Â∞çÊñº OpenAI ÂÖºÂÆπÁöÑ APIÔºåclient ÂøÖÈ†àÂ≠òÂú®
        can_discover = (client is not None) or (cfg.get('provider') == "Pollinations.ai")
        if st.button("üîç ÁôºÁèæÊ®°Âûã", use_container_width=True, disabled=not can_discover):
            with st.spinner("üîç Ê≠£Âú®ÁôºÁèæÊ®°Âûã..."):
                discovered = auto_discover_models(client, cfg['provider'], cfg['base_url'])
                st.session_state.discovered_models = discovered
                st.success(f"ÁôºÁèæ {len(discovered)} ÂÄãÊ®°ÂûãÔºÅ") if discovered else st.warning("Êú™ÁôºÁèæ‰ªª‰ΩïÊ®°Âûã„ÄÇ")
                time.sleep(1); rerun_app()
    else: st.error(f"üî¥ '{st.session_state.active_profile_name}' Êú™È©óË≠â")
    st.markdown("---")
    st.info(f"‚ö° **ÂÖçË≤ªÁâàÂÑ™Âåñ**\n- Ê≠∑Âè≤: {MAX_HISTORY_ITEMS}\n- Êî∂Ëóè: {MAX_FAVORITE_ITEMS}")

st.title("üöÄ FLUX AI (ÊúÄÁµÇÂÆåÊï¥Áâà)")

# --- ‰∏ª‰ªãÈù¢ ---
tab1, tab2, tab3 = st.tabs(["üöÄ ÁîüÊàêÂúñÂÉè", f"üìö Ê≠∑Âè≤ ({len(st.session_state.generation_history)})", f"‚≠ê Êî∂Ëóè ({len(st.session_state.favorite_images)})"])

with tab1:
    if not api_configured: st.warning("‚ö†Ô∏è Ë´ãÂú®ÂÅ¥ÈÇäÊ¨ÑÈÅ∏Êìá‰∏ÄÂÄãÂ∑≤È©óË≠âÁöÑÂ≠òÊ™î„ÄÇ")
    else:
        all_models = merge_models()
        if not all_models: st.warning("‚ö†Ô∏è Êú™ÁôºÁèæ‰ªª‰ΩïÊ®°Âûã„ÄÇË´ãÈªûÊìäÂÅ¥ÈÇäÊ¨ÑÁöÑ„ÄåÁôºÁèæÊ®°Âûã„Äç„ÄÇ")
        else:
            prompt_default = st.session_state.pop('vary_prompt', '')
            neg_prompt_default = st.session_state.pop('vary_negative_prompt', '')
            model_default_key = st.session_state.pop('vary_model', list(all_models.keys())[0])
            model_default_index = list(all_models.keys()).index(model_default_key) if model_default_key in all_models else 0

            sel_model = st.selectbox("Ê®°Âûã:", list(all_models.keys()), index=model_default_index, format_func=lambda x: f"{all_models.get(x, {}).get('icon', 'ü§ñ')} {all_models.get(x, {}).get('name', x)}")
            selected_style = st.selectbox("üé® È¢®Ê†ºÈ†êË®≠:", list(STYLE_PRESETS.keys()))
            prompt_val = st.text_area("‚úçÔ∏è ÊèêÁ§∫Ë©û:", value=prompt_default, height=100, placeholder="‰∏ÄÈöªË≤ìÂú®Êó•ËêΩ‰∏ãÈ£õÁøîÔºåÈõªÂΩ±ÊÑüÔºåÈ´òÂìÅË≥™")
            negative_prompt_val = st.text_area("üö´ Ë≤†ÂêëÊèêÁ§∫Ë©û:", value=neg_prompt_default, height=50, placeholder="Ê®°Á≥ä, Á≥üÁ≥ïÁöÑËß£ÂâñÁµêÊßã, ÊñáÂ≠ó, Ê∞¥Âç∞")
            
            size_preset = st.selectbox("ÂúñÂÉèÂ∞∫ÂØ∏", options=list(IMAGE_SIZES.keys()), format_func=lambda x: IMAGE_SIZES[x])
            final_size_str = size_preset
            if size_preset == "Ëá™ÂÆöÁæ©...":
                w, h = st.columns(2)
                width = w.slider("ÂØ¨Â∫¶", 256, 2048, 1024, 64)
                height = h.slider("È´òÂ∫¶", 256, 2048, 1024, 64)
                final_size_str = f"{width}x{height}"
            
            enhance, private, nologo, safe = False, False, False, False
            if cfg.get('provider') == "Pollinations.ai":
                with st.expander("üå∏ Pollinations.ai ÈÄ≤ÈöéÈÅ∏È†Ö"):
                    enhance, private, nologo, safe = st.checkbox("Â¢ûÂº∑ÊèêÁ§∫Ë©û", True), st.checkbox("ÁßÅÂØÜÊ®°Âºè", True), st.checkbox("ÁßªÈô§Ê®ôË™å", True), st.checkbox("ÂÆâÂÖ®Ê®°Âºè", False)

            if st.button("üöÄ ÁîüÊàêÂúñÂÉè", type="primary", use_container_width=True, disabled=not prompt_val.strip()):
                final_prompt = f"{prompt_val}, {STYLE_PRESETS[selected_style]}" if selected_style != "ÁÑ°" else prompt_val
                with st.spinner("üé® Ê≠£Âú®ÁîüÊàêÂúñÂÉè..."):
                    params = {"model": sel_model, "prompt": final_prompt, "negative_prompt": negative_prompt_val, "size": final_size_str, "n": 1, "enhance": enhance, "private": private, "nologo": nologo, "safe": safe}
                    success, result = generate_images_with_retry(client, **params)
                    if success:
                        img_b64s = [img.b64_json for img in result.data]
                        add_to_history(prompt_val, negative_prompt_val, sel_model, img_b64s, {"size": final_size_str, "provider": cfg['provider'], "style": selected_style})
                        st.success(f"‚ú® ÊàêÂäüÁîüÊàê {len(img_b64s)} ÂºµÂúñÂÉèÔºÅ")
                        cols = st.columns(min(len(img_b64s), 2))
                        for i, b64_json in enumerate(img_b64s):
                            with cols[i % 2]: display_image_with_actions(b64_json, f"{st.session_state.generation_history[0]['id']}_{i}", st.session_state.generation_history[0])
                        gc.collect()
                    else: st.error(f"‚ùå ÁîüÊàêÂ§±Êïó: {result}")

with tab2:
    if not st.session_state.generation_history: st.info("üì≠ Â∞öÁÑ°ÁîüÊàêÊ≠∑Âè≤„ÄÇ")
    else:
        for item in st.session_state.generation_history:
            with st.expander(f"üé® {item['prompt'][:50]}... | {item['timestamp'].strftime('%m-%d %H:%M')}"):
                model_name = merge_models().get(item['model'], {}).get('name', item['model'])
                st.markdown(f"**ÊèêÁ§∫Ë©û**: {item['prompt']}\n\n**Ê®°Âûã**: {model_name}")
                if item.get('negative_prompt'): st.markdown(f"**Ë≤†ÂêëÊèêÁ§∫Ë©û**: {item['negative_prompt']}")
                cols = st.columns(min(len(item['images']), 2))
                for i, b64_json in enumerate(item['images']):
                    with cols[i % 2]: display_image_with_actions(b64_json, f"hist_{item['id']}_{i}", item)

with tab3:
    if not st.session_state.favorite_images: st.info("‚≠ê Â∞öÁÑ°Êî∂ËóèÁöÑÂúñÂÉè„ÄÇ")
    else:
        cols = st.columns(3)
        for i, fav in enumerate(sorted(st.session_state.favorite_images, key=lambda x: x['timestamp'], reverse=True)):
            with cols[i % 3]: display_image_with_actions(fav['image_b64'], fav['id'], fav.get('history_item'))

st.markdown("""<div style="text-align: center; color: #888; margin-top: 2rem;"><small>üöÄ ÊúÄÁµÇÂÆåÊï¥Áâà | ÈÉ®ÁΩ≤Âú® Koyeb ÂÖçË≤ªÂØ¶‰æã üöÄ</small></div>""", unsafe_allow_html=True)
