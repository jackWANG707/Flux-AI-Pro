import streamlit as st
from openai import OpenAI
from PIL import Image
import requests
from io import BytesIO
import datetime
import base64
from typing import Dict, List, Tuple
import time
import random
import json
import uuid
import os
import re
from urllib.parse import urlencode, quote
import gc

# ÁÇ∫ÂÖçË≤ªÊñπÊ°àË®≠ÂÆöÈôêÂà∂
MAX_HISTORY_ITEMS = 15
MAX_FAVORITE_ITEMS = 30
MAX_BATCH_SIZE = 4

# È¢®Ê†ºÈ†êË®≠
STYLE_PRESETS = {
    "ÁÑ°": "", "ÈõªÂΩ±ÊÑü": "cinematic, dramatic lighting, high detail, sharp focus",
    "ÂãïÊº´È¢®": "anime style, vibrant colors, clean line art", "Ë≥ΩÂçöÈæêÂÖã": "cyberpunk, neon lights, futuristic city, high-tech",
    "Ê∞¥ÂΩ©Áï´": "watercolor painting, soft wash, blended colors", "Â•áÂπªËóùË°ì": "fantasy art, epic, detailed, magical",
}

# Êì¥Â±ïÁöÑÂúñÂÉèÂ∞∫ÂØ∏ÈÅ∏È†Ö
IMAGE_SIZES = {
    "Ëá™ÂÆöÁæ©...": "Custom",
    "1024x1024": "Ê≠£ÊñπÂΩ¢ (1:1) - ÈÄöÁî®", "1080x1080": "IG Ë≤ºÊñá (1:1)",
    "1080x1350": "IG Á∏±Âêë (4:5)", "1080x1920": "IG Story (9:16)",
    "1200x630": "FB Ê©´Âêë (1.91:1)", "1344x768": "ÂØ¨Ëû¢Âπï (16:9)",
}

def rerun_app():
    if hasattr(st, 'rerun'): st.rerun()
    elif hasattr(st, 'experimental_rerun'): st.experimental_rerun()
    else: st.stop()

st.set_page_config(page_title="Flux AI (ÁµÇÊ•µËá™Ë®ÇÁâà)", page_icon="üöÄ", layout="wide")

# --- Ê†∏ÂøÉÂáΩÊï∏ (Ëàá‰πãÂâçÁâàÊú¨Áõ∏ÂêåÔºåÁÇ∫Á∞°ÊΩîÁúÅÁï•) ---
def init_session_state():
    if 'api_profiles' not in st.session_state:
        st.session_state.api_profiles = {
            "È†êË®≠ Pollinations": {'provider': 'Pollinations.ai', 'api_key': '', 'base_url': 'https://image.pollinations.ai', 'validated': False, 'pollinations_auth_mode': 'ÂÖçË≤ª', 'pollinations_token': '', 'pollinations_referrer': ''}
        }
    if 'active_profile_name' not in st.session_state or st.session_state.active_profile_name not in st.session_state.api_profiles:
        st.session_state.active_profile_name = list(st.session_state.api_profiles.keys())[0]
    defaults = {'generation_history': [], 'favorite_images': [], 'discovered_models': {}}
    for key, value in defaults.items():
        if key not in st.session_state: st.session_state[key] = value

def get_active_config(): return st.session_state.api_profiles.get(st.session_state.active_profile_name, {})
def auto_discover_flux_models(client, provider: str, base_url: str) -> Dict[str, Dict]: return {}
def analyze_model_name(model_id: str) -> Dict: return {}
def merge_models() -> Dict[str, Dict]: return {**BASE_FLUX_MODELS, **st.session_state.get('discovered_models', {})}
def validate_api_key(api_key: str, base_url: str, provider: str) -> Tuple[bool, str]:
    try:
        if provider == "Pollinations.ai": return (True, "Pollinations.ai Â∑≤Â∞±Á∑í") if requests.get(f"{base_url}/models", timeout=10).ok else (False, "ÈÄ£Êé•Â§±Êïó")
        else: OpenAI(api_key=api_key, base_url=base_url).models.list(); return True, "API ÂØÜÈë∞È©óË≠âÊàêÂäü"
    except Exception as e: return False, f"API È©óË≠âÂ§±Êïó: {e}"
def generate_images_with_retry(client, **params) -> Tuple[bool, any]:
    prompt = params.pop("prompt", "")
    if (neg_prompt := params.pop("negative_prompt", None)): prompt += f" --no {neg_prompt}"
    provider = get_active_config().get('provider')
    for attempt in range(3):
        try:
            if provider == "Pollinations.ai":
                width, height = params.get("size", "1024x1024").split('x')
                api_params = {k: v for k, v in {"model": params.get("model"), "width": width, "height": height, "seed": random.randint(0, 1000000), "nologo": params.get("nologo"), "private": params.get("private"), "enhance": params.get("enhance")}.items() if v is not None}
                headers, cfg = {}, get_active_config()
                auth_mode = cfg.get('pollinations_auth_mode', 'ÂÖçË≤ª')
                if auth_mode == '‰ª§Áâå' and cfg.get('pollinations_token'): headers['Authorization'] = f"Bearer {cfg['pollinations_token']}"
                elif auth_mode == 'ÂüüÂêç' and cfg.get('pollinations_referrer'): headers['Referer'] = cfg['pollinations_referrer']
                response = requests.get(f"{cfg['base_url']}/prompt/{quote(prompt)}?{urlencode(api_params)}", headers=headers, timeout=120)
                if response.ok: return True, type('MockResponse', (object,), {'data': [type('obj', (object,), {'url': f"data:image/png;base64,{base64.b64encode(response.content).decode()}"})()]})()
                raise Exception(f"HTTP {response.status_code}: {response.text}")
            else:
                params["prompt"] = prompt
                return True, client.images.generate(**params)
        except Exception as e:
            if attempt < 2 and ("500" in str(e) or "timeout" in str(e).lower()): time.sleep((attempt + 1) * 2); continue
            return False, str(e)
    return False, "ÊâÄÊúâÈáçË©¶ÂùáÂ§±Êïó"
def add_to_history(prompt: str, negative_prompt: str, model: str, images: List[str], metadata: Dict):
    history = st.session_state.generation_history
    history.insert(0, {"id": str(uuid.uuid4()), "timestamp": datetime.datetime.now(), "prompt": prompt, "negative_prompt": negative_prompt, "model": model, "images": images, "metadata": metadata})
    st.session_state.generation_history = history[:MAX_HISTORY_ITEMS]
def display_image_with_actions(image_url: str, image_id: str, history_item: Dict):
    try:
        img_data = base64.b64decode(image_url.split(',')[1]) if image_url.startswith('data:image') else requests.get(image_url, timeout=10).content
        st.image(Image.open(BytesIO(img_data)), use_column_width=True)
        col1, col2, col3 = st.columns(3)
        with col1: st.download_button("üì• ‰∏ãËºâ", img_data, f"flux_{image_id}.png", "image/png", key=f"dl_{image_id}", use_container_width=True)
        with col2:
            is_fav = any(fav['id'] == image_id for fav in st.session_state.favorite_images)
            if st.button("‚≠ê" if is_fav else "‚òÜ", key=f"fav_{image_id}", use_container_width=True, help="Êî∂Ëóè/ÂèñÊ∂àÊî∂Ëóè"):
                if is_fav: st.session_state.favorite_images = [f for f in st.session_state.favorite_images if f['id'] != image_id]
                elif len(st.session_state.favorite_images) < MAX_FAVORITE_ITEMS: st.session_state.favorite_images.append({"id": image_id, "image_url": image_url, "timestamp": datetime.datetime.now(), "history_item": history_item})
                else: st.warning(f"Êî∂ËóèÂ§æÂ∑≤Êªø")
                rerun_app()
        with col3:
            if st.button("üé® ËÆäÈ´î", key=f"vary_{image_id}", use_container_width=True, help="ÁîüÊàêÊ≠§ÂúñÂÉèÁöÑËÆäÈ´î"):
                st.session_state.update({'vary_prompt': history_item['prompt'], 'vary_negative_prompt': history_item.get('negative_prompt', ''), 'vary_model': history_item['model']})
                rerun_app()
    except Exception as e: st.error(f"ÂúñÂÉèÈ°ØÁ§∫ÈåØË™§: {e}")
def init_api_client():
    cfg = get_active_config()
    if cfg.get('provider') != "Pollinations.ai" and cfg.get('api_key'):
        try: return OpenAI(api_key=cfg['api_key'], base_url=cfg['base_url'])
        except Exception: return None
    return None
def show_api_settings():
    st.subheader("‚öôÔ∏è API Â≠òÊ™îÁÆ°ÁêÜ")
    profile_names = list(st.session_state.api_profiles.keys())
    st.session_state.active_profile_name = st.selectbox("Ê¥ªÂãïÂ≠òÊ™î", profile_names, index=profile_names.index(st.session_state.active_profile_name) if st.session_state.active_profile_name in profile_names else 0)
    active_config = get_active_config().copy()
    with st.expander("üìù Á∑®ËºØÂ≠òÊ™îÂÖßÂÆπ", expanded=True):
        provs = list(API_PROVIDERS.keys())
        sel_prov = st.selectbox("API Êèê‰æõÂïÜ", provs, index=provs.index(active_config.get('provider', 'Pollinations.ai')), format_func=lambda x: f"{API_PROVIDERS[x]['icon']} {API_PROVIDERS[x]['name']}")
        referrer, token, api_key_input = '', '', active_config.get('api_key', '')
        auth_mode = active_config.get('pollinations_auth_mode', 'ÂÖçË≤ª')
        if sel_prov == "Pollinations.ai":
            auth_mode = st.radio("Ê®°Âºè", ["ÂÖçË≤ª", "ÂüüÂêç", "‰ª§Áâå"], horizontal=True, index=["ÂÖçË≤ª", "ÂüüÂêç", "‰ª§Áâå"].index(auth_mode))
            if auth_mode == "ÂüüÂêç": referrer = st.text_input("ÊáâÁî®ÂüüÂêç", value=active_config.get('pollinations_referrer', ''), placeholder="‰æãÂ¶Ç: myapp.koyeb.app")
            elif auth_mode == "‰ª§Áâå": token = st.text_input("API ‰ª§Áâå", value=active_config.get('pollinations_token', ''), type="password")
        else:
            api_key_input = st.text_input("API ÂØÜÈë∞", value=active_config.get('api_key', ''), type="password")
        base_url_input = st.text_input("API Á´ØÈªû URL", value=active_config.get('base_url', API_PROVIDERS[sel_prov]['base_url_default']))
    st.markdown("---")
    profile_name_input = st.text_input("Â≠òÊ™îÂêçÁ®±", value=st.session_state.active_profile_name)
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üíæ ‰øùÂ≠ò/Êõ¥Êñ∞Â≠òÊ™î", type="primary"):
            if profile_name_input.strip():
                new_config = {'provider': sel_prov, 'api_key': api_key_input, 'base_url': base_url_input, 'validated': False}
                if sel_prov == "Pollinations.ai": new_config.update({'pollinations_auth_mode': auth_mode, 'pollinations_referrer': referrer, 'pollinations_token': token})
                with st.spinner("Ê≠£Âú®È©óË≠â‰∏¶‰øùÂ≠ò..."):
                    is_valid, msg = validate_api_key(new_config['api_key'], new_config['base_url'], new_config['provider'])
                    new_config['validated'] = is_valid
                    st.session_state.api_profiles[profile_name_input] = new_config
                    st.session_state.active_profile_name = profile_name_input
                    st.success(f"‚úÖ Â≠òÊ™î '{profile_name_input}' Â∑≤‰øùÂ≠ò„ÄÇÈ©óË≠âÁãÄÊÖã: {'ÊàêÂäü' if is_valid else 'Â§±Êïó'}")
                    time.sleep(1); rerun_app()
            else: st.error("Â≠òÊ™îÂêçÁ®±‰∏çËÉΩÁÇ∫Á©∫")
    with col2:
        if st.button("üóëÔ∏è Âà™Èô§Ê≠§Â≠òÊ™î", disabled=len(st.session_state.api_profiles) <= 1):
            del st.session_state.api_profiles[st.session_state.active_profile_name]
            st.session_state.active_profile_name = list(st.session_state.api_profiles.keys())[0]
            st.success("Â≠òÊ™îÂ∑≤Âà™Èô§„ÄÇ"); time.sleep(1); rerun_app()

init_session_state()
client = init_api_client()
cfg = get_active_config()
api_configured = cfg.get('validated', False)

# --- ÂÅ¥ÈÇäÊ¨Ñ ---
with st.sidebar:
    show_api_settings()
    st.markdown("---")
    if api_configured:
        st.success(f"üü¢ Ê¥ªÂãïÂ≠òÊ™î: '{st.session_state.active_profile_name}'")
        if st.button("üîç ÁôºÁèæÊ®°Âûã", use_container_width=True): pass
    else: st.error(f"üî¥ '{st.session_state.active_profile_name}' Êú™È©óË≠â")
    st.markdown("---")
    st.info(f"‚ö° **ÂÖçË≤ªÁâàÂÑ™Âåñ**\n- Ê≠∑Âè≤: {MAX_HISTORY_ITEMS}\n- Êî∂Ëóè: {MAX_FAVORITE_ITEMS}")

st.title("üöÄ Flux AI (ÁµÇÊ•µËá™Ë®ÇÁâà)")

# --- ‰∏ª‰ªãÈù¢ ---
tab1, tab2, tab3 = st.tabs(["üöÄ ÁîüÊàêÂúñÂÉè", f"üìö Ê≠∑Âè≤ ({len(st.session_state.generation_history)})", f"‚≠ê Êî∂Ëóè ({len(st.session_state.favorite_images)})"])

with tab1:
    if not api_configured: st.warning("‚ö†Ô∏è Ë´ãÂú®ÂÅ¥ÈÇäÊ¨ÑÈÅ∏Êìá‰∏ÄÂÄãÂ∑≤È©óË≠âÁöÑÂ≠òÊ™î„ÄÇ")
    else:
        all_models = merge_models()
        if not all_models: st.warning("‚ö†Ô∏è Êú™ÁôºÁèæÊ®°ÂûãÔºåË´ãÈªûÊìä„ÄåÁôºÁèæÊ®°Âûã„Äç„ÄÇ")
        else:
            sel_model = st.selectbox("Ê®°Âûã:", list(all_models.keys()), format_func=lambda x: f"{all_models[x].get('icon', 'ü§ñ')} {all_models[x].get('name', x)}")
            selected_style = st.selectbox("üé® È¢®Ê†ºÈ†êË®≠:", list(STYLE_PRESETS.keys()))
            prompt_val = st.text_area("‚úçÔ∏è ÊèêÁ§∫Ë©û:", height=100, placeholder="‰∏ÄÈöªË≤ìÂú®Êó•ËêΩ‰∏ãÈ£õÁøîÔºåÈõªÂΩ±ÊÑü")
            negative_prompt_val = st.text_area("üö´ Ë≤†ÂêëÊèêÁ§∫Ë©û:", height=50, placeholder="Ê®°Á≥ä, Á≥üÁ≥ïÁöÑËß£ÂâñÁµêÊßã")
            
            size_preset = st.selectbox("ÂúñÂÉèÂ∞∫ÂØ∏", options=list(IMAGE_SIZES.keys()), format_func=lambda x: IMAGE_SIZES[x])
            
            width, height = 1024, 1024
            if size_preset == "Ëá™ÂÆöÁæ©...":
                col_w, col_h = st.columns(2)
                with col_w: width = st.slider("ÂØ¨Â∫¶ (px)", 512, 2048, 1024, 64)
                with col_h: height = st.slider("È´òÂ∫¶ (px)", 512, 2048, 1024, 64)
                final_size_str = f"{width}x{height}"
            else:
                final_size_str = size_preset

            num_images = 1 if cfg['provider'] == "Pollinations.ai" else st.slider("ÁîüÊàêÊï∏Èáè", 1, MAX_BATCH_SIZE, 1)

            enhance, private, nologo = False, False, False
            if cfg['provider'] == "Pollinations.ai":
                with st.expander("üå∏ Pollinations.ai ÈÅ∏È†Ö"):
                    enhance, private, nologo = st.checkbox("Â¢ûÂº∑ÊèêÁ§∫Ë©û", True), st.checkbox("ÁßÅÂØÜÊ®°Âºè", True), st.checkbox("ÁßªÈô§Ê®ôË™å", True)

            if st.button("üöÄ ÁîüÊàêÂúñÂÉè", type="primary", use_container_width=True, disabled=not prompt_val.strip()):
                final_prompt = f"{prompt_val}, {STYLE_PRESETS[selected_style]}" if selected_style != "ÁÑ°" else prompt_val
                with st.spinner(f"üé® Ê≠£Âú®ÁîüÊàê {num_images} ÂºµÂúñÂÉè..."):
                    params = {"model": sel_model, "prompt": final_prompt, "negative_prompt": negative_prompt_val, "n": num_images, "size": final_size_str, "enhance": enhance, "private": private, "nologo": nologo}
                    success, result = generate_images_with_retry(client, **params)
                    if success:
                        img_urls = [img.url for img in result.data]
                        add_to_history(prompt_val, negative_prompt_val, sel_model, img_urls, {"size": final_size_str, "provider": cfg['provider'], "style": selected_style})
                        st.success(f"‚ú® ÊàêÂäüÁîüÊàê {len(img_urls)} ÂºµÂúñÂÉèÔºÅ")
                        cols = st.columns(min(len(img_urls), 2))
                        for i, url in enumerate(img_urls):
                            with cols[i % 2]: display_image_with_actions(url, f"{st.session_state.generation_history[0]['id']}_{i}", st.session_state.generation_history[0])
                        gc.collect()
                    else: st.error(f"‚ùå ÁîüÊàêÂ§±Êïó: {result}")

# ... (Ê≠∑Âè≤ÂíåÊî∂ËóèÂ§æÊ®ôÁ±§ÁöÑÁ®ãÂºèÁ¢ºËàá‰πãÂâçÁõ∏Âêå) ...
with tab2: st.info("üì≠ Â∞öÁÑ°ÁîüÊàêÊ≠∑Âè≤„ÄÇ")
with tab3: st.info("‚≠ê Â∞öÁÑ°Êî∂ËóèÁöÑÂúñÂÉè„ÄÇ")

st.markdown("""<div style="text-align: center; color: #888; margin-top: 2rem;"><small>üöÄ ÁµÇÊ•µËá™Ë®ÇÁâà | ÈÉ®ÁΩ≤Âú® Koyeb ÂÖçË≤ªÂØ¶‰æã üöÄ</small></div>""", unsafe_allow_html=True)
