import streamlit as st
from openai import OpenAI
from PIL import Image
import requests
from io import BytesIO
import datetime
import base64
from typing import Dict, List, Tuple
import time
import random
import json
import uuid
import os
import re
from urllib.parse import urlencode, quote
import gc

# ÁÇ∫ÂÖçË≤ªÊñπÊ°àË®≠ÂÆöÈôêÂà∂
MAX_HISTORY_ITEMS = 15
MAX_FAVORITE_ITEMS = 30
MAX_BATCH_SIZE = 4

# È¢®Ê†ºÈ†êË®≠
STYLE_PRESETS = {
    "ÁÑ°": "",
    "ÈõªÂΩ±ÊÑü": "cinematic, dramatic lighting, high detail, sharp focus",
    "ÂãïÊº´È¢®": "anime style, vibrant colors, clean line art",
    "Ë≥ΩÂçöÈæêÂÖã": "cyberpunk, neon lights, futuristic city, high-tech",
    "Ê∞¥ÂΩ©Áï´": "watercolor painting, soft wash, blended colors",
    "Â•áÂπªËóùË°ì": "fantasy art, epic, detailed, magical",
}

def rerun_app():
    if hasattr(st, 'rerun'): st.rerun()
    elif hasattr(st, 'experimental_rerun'): st.experimental_rerun()
    else: st.stop()

st.set_page_config(page_title="Flux AI (Pollinations Â¢ûÂº∑Áâà)", page_icon="üå∏", layout="wide")

# --- API ÂíåÊ®°ÂûãÈÖçÁΩÆ ---
API_PROVIDERS = {"OpenAI Compatible": {"name": "OpenAI ÂÖºÂÆπ API", "base_url_default": "https://api.openai.com/v1", "key_prefix": "sk-", "description": "OpenAI ÂÆòÊñπÊàñÂÖºÂÆπÁöÑ API ÊúçÂãô", "icon": "ü§ñ"},"Navy": {"name": "Navy API", "base_url_default": "https://api.navy/v1", "key_prefix": "sk-", "description": "Navy Êèê‰æõÁöÑ AI ÂúñÂÉèÁîüÊàêÊúçÂãô", "icon": "‚öì"},"Pollinations.ai": {"name": "Pollinations.ai", "base_url_default": "https://image.pollinations.ai", "key_prefix": "", "description": "ÊîØÊè¥ÂÖçË≤ªÂíåË™çË≠âÊ®°ÂºèÁöÑÂúñÂÉèÁîüÊàê API", "icon": "üå∏"},"Custom": {"name": "Ëá™ÂÆöÁæ© API", "base_url_default": "", "key_prefix": "", "description": "Ëá™ÂÆöÁæ©ÁöÑ API Á´ØÈªû", "icon": "üîß"}}
BASE_FLUX_MODELS = {"flux.1-schnell": {"name": "FLUX.1 Schnell", "description": "ÊúÄÂø´ÁöÑÁîüÊàêÈÄüÂ∫¶ÔºåÈñãÊ∫êÊ®°Âûã", "icon": "‚ö°", "priority": 1},"flux.1-dev": {"name": "FLUX.1 Dev", "description": "ÈñãÁôºÁâàÊú¨ÔºåÂπ≥Ë°°ÈÄüÂ∫¶ËàáË≥™Èáè", "icon": "üîß", "priority": 2}}
FLUX_MODEL_PATTERNS = {r'flux[\\.\\-]?1[\\.\\-]?schnell': {"name_template": "FLUX.1 Schnell", "icon": "‚ö°", "priority_base": 100},r'flux[\\.\\-]?1[\\.\\-]?dev': {"name_template": "FLUX.1 Dev", "icon": "üîß", "priority_base": 200},r'flux[\\.\\-]?1[\\.\\-]?pro': {"name_template": "FLUX.1 Pro", "icon": "üëë", "priority_base": 300},r'flux[\\.\\-]?1[\\.\\-]?kontext|kontext': {"name_template": "FLUX.1 Kontext", "icon": "üéØ", "priority_base": 400}}

# --- Ê†∏ÂøÉÂáΩÊï∏ ---
def auto_discover_flux_models(client, provider: str, base_url: str) -> Dict[str, Dict]:
    discovered_models = {}
    try:
        if provider == "Pollinations.ai":
            response = requests.get(f"{base_url}/models", timeout=10)
            if response.ok:
                for model_name in response.json():
                    model_info = analyze_model_name(model_name)
                    model_info.update({'source': 'pollinations', 'icon': 'üå∏'})
                    discovered_models[model_name] = model_info
        else:
            for model in client.models.list().data:
                if 'flux' in model.id.lower() or 'kontext' in model.id.lower():
                    model_info = analyze_model_name(model.id)
                    model_info['source'] = 'api_discovery'
                    discovered_models[model.id] = model_info
        return discovered_models
    except Exception as e:
        st.warning(f"Ê®°ÂûãÁôºÁèæÂ§±Êïó: {e}")
        return {}

def analyze_model_name(model_id: str) -> Dict:
    model_lower = model_id.lower()
    for pattern, info in FLUX_MODEL_PATTERNS.items():
        if re.search(pattern, model_lower):
            return {"name": info["name_template"], "icon": info["icon"], "description": f"Ëá™ÂãïÁôºÁèæÁöÑ {info['name_template']} Ê®°Âûã", "priority": info["priority_base"] + hash(model_id) % 100}
    return {"name": model_id.replace('-', ' ').replace('_', ' ').title(), "icon": "ü§ñ", "description": f"Ëá™ÂãïÁôºÁèæÁöÑÊ®°Âûã: {model_id}", "priority": 999}

def merge_models() -> Dict[str, Dict]:
    merged_models = {**BASE_FLUX_MODELS, **st.session_state.get('discovered_models', {})}
    return dict(sorted(merged_models.items(), key=lambda item: item[1].get('priority', 999)))

def validate_api_key(api_key: str, base_url: str, provider: str) -> Tuple[bool, str]:
    try:
        if provider == "Pollinations.ai": return (True, "Pollinations.ai Â∑≤Â∞±Á∑í") if requests.get(f"{base_url}/models", timeout=10).ok else (False, "ÈÄ£Êé•Â§±Êïó")
        else:
            OpenAI(api_key=api_key, base_url=base_url).models.list()
            return True, "API ÂØÜÈë∞È©óË≠âÊàêÂäü"
    except Exception as e: return False, f"API È©óË≠âÂ§±Êïó: {e}"

def generate_images_with_retry(client, provider: str, **params) -> Tuple[bool, any]:
    prompt = params.pop("prompt", "")
    if (neg_prompt := params.pop("negative_prompt", None)):
        prompt += f" --no {neg_prompt}"

    for attempt in range(3):
        try:
            if provider == "Pollinations.ai":
                api_params = {k: v for k, v in {
                    "model": params.get("model"), "width": params.get("size", "1024x1024").split('x')[0],
                    "height": params.get("size", "1024x1024").split('x')[1], "seed": random.randint(0, 1000000),
                    "nologo": params.get("nologo"), "private": params.get("private"), "enhance": params.get("enhance")
                }.items() if v is not None}
                
                headers, cfg = {}, st.session_state.get('api_config', {})
                auth_mode = cfg.get('pollinations_auth_mode', 'ÂÖçË≤ª')
                if auth_mode == '‰ª§Áâå' and cfg.get('pollinations_token'): headers['Authorization'] = f"Bearer {cfg['pollinations_token']}"
                elif auth_mode == 'ÂüüÂêç' and cfg.get('pollinations_referrer'): headers['Referer'] = cfg['pollinations_referrer']
                
                response = requests.get(f"{cfg['base_url']}/prompt/{quote(prompt)}?{urlencode(api_params)}", headers=headers, timeout=120)
                if response.ok: return True, type('MockResponse', (object,), {'data': [type('obj', (object,), {'url': f"data:image/png;base64,{base64.b64encode(response.content).decode()}"})()]})()
                raise Exception(f"HTTP {response.status_code}: {response.text}")
            else:
                params["prompt"] = prompt
                return True, client.images.generate(**params)
        except Exception as e:
            if attempt < 2 and ("500" in str(e) or "timeout" in str(e).lower()): time.sleep((attempt + 1) * 2); continue
            return False, str(e)
    return False, "ÊâÄÊúâÈáçË©¶ÂùáÂ§±Êïó"

def init_session_state():
    defaults = {'api_config': {'provider': 'Pollinations.ai', 'api_key': '', 'base_url': 'https://image.pollinations.ai', 'validated': False, 'pollinations_auth_mode': 'ÂÖçË≤ª', 'pollinations_token': '', 'pollinations_referrer': ''},'generation_history': [], 'favorite_images': [], 'discovered_models': {}}
    for key, value in defaults.items():
        if key not in st.session_state: st.session_state[key] = value

def add_to_history(prompt: str, negative_prompt: str, model: str, images: List[str], metadata: Dict):
    history = st.session_state.generation_history
    history.insert(0, {"id": str(uuid.uuid4()), "timestamp": datetime.datetime.now(), "prompt": prompt, "negative_prompt": negative_prompt, "model": model, "images": images, "metadata": metadata})
    st.session_state.generation_history = history[:MAX_HISTORY_ITEMS]

def display_image_with_actions(image_url: str, image_id: str, history_item: Dict):
    try:
        img_data = base64.b64decode(image_url.split(',')[1]) if image_url.startswith('data:image') else requests.get(image_url, timeout=10).content
        st.image(Image.open(BytesIO(img_data)), use_column_width=True)
        col1, col2, col3 = st.columns(3)
        with col1: st.download_button("üì• ‰∏ãËºâ", img_data, f"flux_{image_id}.png", "image/png", key=f"dl_{image_id}", use_container_width=True)
        with col2:
            is_fav = any(fav['id'] == image_id for fav in st.session_state.favorite_images)
            if st.button("‚≠ê" if is_fav else "‚òÜ", key=f"fav_{image_id}", use_container_width=True, help="Êî∂Ëóè/ÂèñÊ∂àÊî∂Ëóè"):
                if is_fav: st.session_state.favorite_images = [f for f in st.session_state.favorite_images if f['id'] != image_id]
                elif len(st.session_state.favorite_images) < MAX_FAVORITE_ITEMS: st.session_state.favorite_images.append({"id": image_id, "image_url": image_url, "timestamp": datetime.datetime.now(), "history_item": history_item})
                else: st.warning(f"Êî∂ËóèÂ§æÂ∑≤Êªø (‰∏äÈôê {MAX_FAVORITE_ITEMS} Âºµ)")
                rerun_app()
        with col3:
            if st.button("üé® ËÆäÈ´î", key=f"vary_{image_id}", use_container_width=True, help="ÁîüÊàêÊ≠§ÂúñÂÉèÁöÑËÆäÈ´î"):
                st.session_state.update({'vary_prompt': history_item['prompt'], 'vary_negative_prompt': history_item.get('negative_prompt', ''), 'vary_model': history_item['model']})
                rerun_app()
    except Exception as e: st.error(f"ÂúñÂÉèÈ°ØÁ§∫ÈåØË™§: {e}")

def init_api_client():
    cfg = st.session_state.api_config
    if cfg.get('provider') != "Pollinations.ai" and cfg.get('api_key'):
        try: return OpenAI(api_key=cfg['api_key'], base_url=cfg['base_url'])
        except Exception: return None
    return None

def show_api_settings():
    st.subheader("üîë API Ë®≠ÁΩÆ")
    provs = list(API_PROVIDERS.keys())
    sel_prov = st.selectbox("API Êèê‰æõÂïÜ", provs, index=provs.index(st.session_state.api_config.get('provider', 'Pollinations.ai')), format_func=lambda x: f"{API_PROVIDERS[x]['icon']} {API_PROVIDERS[x]['name']}")
    
    st.session_state.api_config['provider'] = sel_prov
    prov_info = API_PROVIDERS[sel_prov]
    
    if sel_prov == "Pollinations.ai":
        st.markdown("##### üå∏ Pollinations.ai Ë™çË≠â")
        auth_mode = st.radio("Ê®°Âºè", ["ÂÖçË≤ª", "ÂüüÂêç", "‰ª§Áâå"], horizontal=True, index=["ÂÖçË≤ª", "ÂüüÂêç", "‰ª§Áâå"].index(st.session_state.api_config.get('pollinations_auth_mode', 'ÂÖçË≤ª')))
        st.session_state.api_config['pollinations_auth_mode'] = auth_mode
        if auth_mode == "ÂüüÂêç":
            st.session_state.api_config['pollinations_referrer'] = st.text_input("ÊáâÁî®ÂüüÂêç", value=st.session_state.api_config.get('pollinations_referrer', ''), placeholder="‰æãÂ¶Ç: myapp.koyeb.app")
        elif auth_mode == "‰ª§Áâå":
            st.session_state.api_config['pollinations_token'] = st.text_input("API ‰ª§Áâå", value=st.session_state.api_config.get('pollinations_token', ''), type="password")
    else:
        st.session_state.api_config['api_key'] = st.text_input("API ÂØÜÈë∞", value=st.session_state.api_config.get('api_key', ''), type="password")

    st.session_state.api_config['base_url'] = st.text_input("API Á´ØÈªû URL", value=st.session_state.api_config.get('base_url', prov_info['base_url_default']))

    if st.button("üíæ ‰øùÂ≠ò‰∏¶Ê∏¨Ë©¶", type="primary"):
        with st.spinner("Ê≠£Âú®È©óË≠â‰∏¶‰øùÂ≠ò..."):
            is_valid, msg = validate_api_key(st.session_state.api_config.get('api_key'), st.session_state.api_config['base_url'], sel_prov)
            st.session_state.api_config['validated'] = is_valid
            st.session_state.discovered_models = {}
            if is_valid: st.success(f"‚úÖ {msg}ÔºåË®≠ÁΩÆÂ∑≤‰øùÂ≠ò„ÄÇ")
            else: st.error(f"‚ùå {msg}")
            time.sleep(1); rerun_app()

init_session_state()
client = init_api_client()
cfg = st.session_state.api_config
api_configured = cfg.get('validated', False)

# --- ÂÅ¥ÈÇäÊ¨Ñ ---
with st.sidebar:
    show_api_settings()
    st.markdown("---")
    if api_configured:
        st.success(f"üü¢ {cfg['provider']} API Â∑≤Â∞±Á∑í")
        if st.button("üîç ÁôºÁèæÊ®°Âûã", use_container_width=True):
            with st.spinner("üîç Ê≠£Âú®ÁôºÁèæÊ®°Âûã..."):
                discovered = auto_discover_flux_models(client, cfg['provider'], cfg['base_url'])
                st.session_state.discovered_models = discovered
                st.success(f"ÁôºÁèæ {len(discovered)} ÂÄãÊ®°ÂûãÔºÅ") if discovered else st.warning("Êú™ÁôºÁèæ‰ªª‰ΩïÂÖºÂÆπÊ®°Âûã„ÄÇ")
                time.sleep(1); rerun_app()
    else:
        st.error("üî¥ API Êú™ÈÖçÁΩÆ")
    st.markdown("---")
    st.info(f"‚ö° **ÂÖçË≤ªÁâàÂÑ™Âåñ**\n- Ê≠∑Âè≤Ë®òÈåÑ: {MAX_HISTORY_ITEMS} Ê¢ù\n- Êî∂ËóèÂ§æ: {MAX_FAVORITE_ITEMS} Âºµ")

st.title("üå∏ Flux AI (Pollinations Â¢ûÂº∑Áâà)")

# --- ‰∏ª‰ªãÈù¢ ---
tab1, tab2, tab3 = st.tabs(["üöÄ ÁîüÊàêÂúñÂÉè", f"üìö Ê≠∑Âè≤Ë®òÈåÑ ({len(st.session_state.generation_history)})", f"‚≠ê Êî∂ËóèÂ§æ ({len(st.session_state.favorite_images)})"])

with tab1:
    if not api_configured:
        st.warning("‚ö†Ô∏è Ë´ãÂú®ÂÅ¥ÈÇäÊ¨ÑÈÖçÁΩÆ‰∏¶È©óË≠â API„ÄÇ")
    else:
        all_models = merge_models()
        if not all_models:
            st.warning("‚ö†Ô∏è Êú™ÁôºÁèæ‰ªª‰ΩïÊ®°ÂûãÔºåË´ãÈªûÊìäÂÅ¥ÈÇäÊ¨ÑÁöÑ„ÄåÁôºÁèæÊ®°Âûã„Äç„ÄÇ")
        else:
            prompt_default = st.session_state.pop('vary_prompt', '')
            neg_prompt_default = st.session_state.pop('vary_negative_prompt', '')
            model_default_key = st.session_state.pop('vary_model', list(all_models.keys())[0])
            model_default_index = list(all_models.keys()).index(model_default_key) if model_default_key in all_models else 0
            
            sel_model = st.selectbox("Ê®°Âûã:", list(all_models.keys()), index=model_default_index, format_func=lambda x: f"{all_models[x].get('icon', 'ü§ñ')} {all_models[x].get('name', x)}")
            st.info(f"**{all_models[sel_model].get('name')}**: {all_models[sel_model].get('description', 'N/A')}")
            
            selected_style = st.selectbox("üé® È¢®Ê†ºÈ†êË®≠:", list(STYLE_PRESETS.keys()))
            prompt_val = st.text_area("‚úçÔ∏è ÊèêÁ§∫Ë©û:", value=prompt_default, height=100, placeholder="‰∏ÄÈöªË≤ìÂú®Êó•ËêΩ‰∏ãÈ£õÁøîÔºåÈõªÂΩ±ÊÑüÔºåÈ´òÂìÅË≥™")
            negative_prompt_val = st.text_area("üö´ Ë≤†ÂêëÊèêÁ§∫Ë©û (‰∏çÂ∏åÊúõÂá∫ÁèæÁöÑÂÖßÂÆπ):", value=neg_prompt_default, height=50, placeholder="Ê®°Á≥ä, Á≥üÁ≥ïÁöÑËß£ÂâñÁµêÊßã, ÊñáÂ≠ó, Ê∞¥Âç∞")
            
            col1, col2 = st.columns(2)
            with col1: size = st.selectbox("ÂúñÂÉèÂ∞∫ÂØ∏", ["1024x1024", "1152x896", "896x1152"], index=0)
            with col2:
                num_images = 1 if cfg['provider'] == "Pollinations.ai" else st.slider("ÁîüÊàêÊï∏Èáè", 1, MAX_BATCH_SIZE, 1)

            # Pollinations.ai Â∞àÁî®ÈÅ∏È†Ö
            if cfg['provider'] == "Pollinations.ai":
                with st.expander("üå∏ Pollinations.ai ÈÄ≤ÈöéÈÅ∏È†Ö"):
                    enhance = st.checkbox("Â¢ûÂº∑ÊèêÁ§∫Ë©û (ÈÄèÈÅé LLM)", value=True)
                    private = st.checkbox("ÁßÅÂØÜÊ®°Âºè", value=True)
                    nologo = st.checkbox("ÁßªÈô§Ê®ôË™å", value=True)
            else:
                enhance, private, nologo = False, False, False

            if st.button("üöÄ ÁîüÊàêÂúñÂÉè", type="primary", use_container_width=True, disabled=not prompt_val.strip()):
                final_prompt = f"{prompt_val}, {STYLE_PRESETS[selected_style]}" if selected_style != "ÁÑ°" else prompt_val
                
                with st.spinner(f"üé® Ê≠£Âú®ÁîüÊàê {num_images} ÂºµÂúñÂÉè..."):
                    params = {"model": sel_model, "prompt": final_prompt, "negative_prompt": negative_prompt_val, "n": num_images, "size": size, "enhance": enhance, "private": private, "nologo": nologo}
                    success, result = generate_images_with_retry(client, cfg['provider'], **params)
                    
                    if success:
                        img_urls = [img.url for img in result.data]
                        add_to_history(prompt_val, negative_prompt_val, sel_model, img_urls, {"size": size, "provider": cfg['provider'], "style": selected_style})
                        st.success(f"‚ú® ÊàêÂäüÁîüÊàê {len(img_urls)} ÂºµÂúñÂÉèÔºÅ")
                        
                        cols = st.columns(min(len(img_urls), 2))
                        for i, url in enumerate(img_urls):
                            with cols[i % 2]:
                                display_image_with_actions(url, f"{st.session_state.generation_history[0]['id']}_{i}", st.session_state.generation_history[0])
                        
                        gc.collect()
                    else:
                        st.error(f"‚ùå ÁîüÊàêÂ§±Êïó: {result}")

# --- Ê≠∑Âè≤Ë®òÈåÑÂíåÊî∂ËóèÂ§æÊ®ôÁ±§ (Ëàá‰πãÂâçÁõ∏Âêå) ---
with tab2:
    if not st.session_state.generation_history: st.info("üì≠ Â∞öÁÑ°ÁîüÊàêÊ≠∑Âè≤„ÄÇ")
    else:
        for item in st.session_state.generation_history:
            with st.expander(f"üé® {item['prompt'][:60]}... | {item['timestamp'].strftime('%m-%d %H:%M')}"):
                st.markdown(f"**ÊèêÁ§∫Ë©û**: {item['prompt']}\n\n**Ê®°Âûã**: {merge_models().get(item['model'], {}).get('name', item['model'])}")
                if item.get('negative_prompt'): st.markdown(f"**Ë≤†ÂêëÊèêÁ§∫Ë©û**: {item['negative_prompt']}")
                cols = st.columns(min(len(item['images']), 2))
                for i, url in enumerate(item['images']):
                    with cols[i % 2]: display_image_with_actions(url, f"hist_{item['id']}_{i}", item)

with tab3:
    if not st.session_state.favorite_images: st.info("‚≠ê Â∞öÁÑ°Êî∂ËóèÁöÑÂúñÂÉè„ÄÇ")
    else:
        cols = st.columns(3)
        for i, fav in enumerate(sorted(st.session_state.favorite_images, key=lambda x: x['timestamp'], reverse=True)):
            with cols[i % 3]: display_image_with_actions(fav['image_url'], fav['id'], fav.get('history_item'))

st.markdown("""<div style="text-align: center; color: #888; margin-top: 2rem;"><small>üå∏ Pollinations Â¢ûÂº∑Áâà | ÈÉ®ÁΩ≤Âú® Koyeb ÂÖçË≤ªÂØ¶‰æã üå∏</small></div>""", unsafe_allow_html=True)

